{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Charts/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid-19.jpg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","activeCases","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","active","url","fetchData","country","a","changeableUrl","axios","get","lastUpdates","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","header","image","src","coronaImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b945675.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"active\":\"Cards_active__1mwzX\"};","import React  from 'react' \nimport {Card,CardContent,Typography, Grid} from '@material-ui/core'; \nimport CountUp from 'react-countup' \nimport cx from 'classnames'\nimport styles from './Cards.module.css'; \n\nconst Cards =({data: { confirmed, recovered , deaths }, activeCases})=>{ \n    if(!confirmed){\n        return 'loading...'\n    } \n\n    return (\n        <div className={styles.container}>  \n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}> \n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/> \n                        </Typography> \n                        \n                        <Typography variant=\"body2\"> Number of infected cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid> \n\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card,styles.recovered)}> \n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/> \n                        </Typography> \n                        \n                        <Typography variant=\"body2\"> Number of recovered cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n                \n                <Grid item component={Card}xs={12} md={2} className={cx(styles.card,styles.active)}> \n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Active cases</Typography>\n                        <Typography variant=\"h5\"> \n                            <CountUp start={0} end={activeCases} duration={2.5} separator=\",\"/>  \n                        </Typography>\n                        <Typography variant=\"body2\"> Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid> \n\n                <Grid item component={Card}xs={12} md={2} className={cx(styles.card,styles.deaths)} > \n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/> \n                        </Typography> \n                        \n                        <Typography variant=\"body2\"> Number of death cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n\n            </Grid> \n\n            \n            \n\n        </div>\n    )\n}\nexport default Cards;","import axios from 'axios'\n\nconst url=\"https:/covid19.mathdro.id/api\"; \nconst url2=\"https:/covid19.mathdro.id/api/daily\"; \nconst url3=\"https:/covid19.mathdro.id/api/countries\"\n\nexport  const  fetchData = async (country) =>{ \n    let  changeableUrl = url; \n    \n    if(country) {\n        changeableUrl=`${url}/countries/${country}` \n\n    }\n    try{\n        const {data: { confirmed, recovered, deaths, lastUpdates} }= await axios.get(changeableUrl); \n        \n        return {  confirmed, recovered, deaths, lastUpdates }\n\n    }catch(error){\n        console.log(error) \n    }\n\n} \n\nexport const fetchDailyData= async()=>{\n    try{\n        const {data}= await axios.get(url2);   \n\n        const modifiedData = data.map((dailyData)=>({\n            confirmed:dailyData.confirmed.total, \n            deaths:dailyData.deaths.total,\n            date: dailyData.reportDate\n        })); \n\n        return modifiedData\n    }catch(error){\n\n    }\n} \n\nexport const fetchCountries = async () =>{\n    try{\n        const { data: { countries } } =await axios.get(url3);  \n         \n        return countries.map((country) => country.name); \n       \n        \n\n    \n    }catch(error){\n        console.log(error)\n    }\n}","import React, {useState, useEffect}  from 'react' \nimport { fetchDailyData} from '../../api' \nimport {Line, Bar} from 'react-chartjs-2';\nimport styles  from './Chart.module.css' \n\nconst Charts =({data:{confirmed, deaths , recovered}, country,activeCases})=>{ \n    const [dailyData ,setDailyData]=useState([]); \n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData (await fetchDailyData());\n        } \n        \n        \n\n        fetchAPI();\n    },[]);    \n\n    const lineChart = (  \n        dailyData.length ?(\n        <Line data={{\n            labels:dailyData.map(({date})=> date),\n            datasets:[{\n                data:dailyData.map(({confirmed})=> confirmed),\n                label:'Infected',\n                borderColor:'#3333ff',\n                fill:true \n            \n            },{\n                data:dailyData.map(({deaths})=> deaths),\n                label:'Deaths',\n                backgroundColor:'rgba(255, 0, 0, 0.5)',\n                borderColor:'red',\n                fill:true\n            },]\n        }}/> \n        ) :null\n\n    ) \n\n          \n    const  barChart= ( \n        confirmed \n        ?(\n           <Bar \n            data={ { \n                labels:['Infected', 'Recovered', 'Active cases', 'Deaths'],\n                datasets:[{\n                    label: 'people',\n                    backgroundColor:[ \n                        'rgba(0,0,255,0.5)', \n                        'rgba(0,255,0,0.5)',\n                        'rgba(255,255,0,0.5)',\n                        'rgba(255,0,0,0.5)'  \n                    ], \n                    data:[confirmed.value, recovered.value, activeCases, deaths.value]\n                }]\n            }} \n            options={{\n                legend:{display:false}, \n                title: { display: true, text:`Current state in ${country}`}\n            }} /> \n        ): null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart: lineChart}\n        </div>\n    )\n    \n\n\n\n};  \n\n\n\nexport default Charts;","// import React,{useState,useEffect}  from 'react' ; \nimport React from 'react';\nimport {NativeSelect,FormControl} from '@material-ui/core'  \n// import {fetchCountries} from '../../api'\n\nimport styles from './CountryPicker.module.css'\n\nconst CountryPicker =({handleCountryChange})=>{  \n\n    // const [fetchedCountries, setfetchedCountries]=useState([]);\n    // useEffect(()=>{\n    //     const fetchAPI= async ()=>{  \n    //         setfetchedCountries(await fetchCountries())\n\n\n    //     } \n    //     fetchAPI();\n    // }, [setfetchedCountries]);  \n\n     \n    const EA = [\n        \"Tanzania\", \"Kenya\", \"Uganda\", \"Rwanda\", \"Burundi\",\"South Sudan\" \n    ] \n\n    \n    return (\n       <FormControl className={styles.formControl}>\n           <NativeSelect  defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\n               <option value=\"\"> global</option>  \n               {EA.map((country, i)=> <option key={i} value={country}> {country} </option> )} \n\n           </NativeSelect>\n\n\n       </FormControl>\n    )\n}\nexport default CountryPicker;","import React from 'react'; \nimport {Cards,Charts,CountryPicker} from './components' \nimport styles  from './App.module.css'; \nimport {fetchData} from './api'  \nimport coronaImage from './images/covid-19.jpg' \nimport {Typography } from '@material-ui/core'\n\n\nclass App extends  React.Component{ \n  state = {\n    data:{}, \n    country:'', \n    activeCases:''\n  }\n\n  async componentDidMount(){\n    const fetchedData=await fetchData(); \n    var activeCases = fetchedData.confirmed.value- fetchedData.recovered.value\n    this.setState({data:fetchedData, activeCases:activeCases});\n  } \n  \n  handleCountryChange = async (country) =>{  \n    const fetchedData= await fetchData(country); \n\n    var activeCases = fetchedData.confirmed.value- fetchedData.recovered.value -fetchedData.deaths.value\n     \n    this.setState({data: fetchedData, country:country , activeCases:activeCases}) \n    \n \n  } \n\n     \n\n     \n\n  \n\n  \n\n\n   \n  \n   \n\n  render(){   \n    const { data, country , activeCases }= this.state \n  \n\n\n    return ( \n      <div className={styles.container}>  \n        <Typography className={styles.header} variant=\"h6\"><strong>COVID-19 East Africa </strong> </Typography>  \n        <img className={styles.image} src={coronaImage} alt='covid-19' />\n       \n        <Cards data={data} activeCases={activeCases} />\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Charts data={data} country={country} activeCases={activeCases} />\n      </div>\n    ); \n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode> ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\",\"header\":\"App_header__3ZZ1n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__yjZZH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/covid-19.179aa7e3.jpg\";"],"sourceRoot":""}